#+OPTIONS: toc:nil num:nil
#+SEQ_TODO: TODO STARTED | DONE

#+MACRO: term /$1$2/

* Glossary

  + namespace ::

  + environment ::

  + binding ::

  + shadowing ::

  + key ::

  + value ::

  + entry ::

  + scope :: A description of the subset of environments in a
             hierarchy of environments that are considered for an
             operation.

             Example: A lookup with "direct" scope considers the
             bindings of the specified environment but not any
             bindings in ancestor environment of the given
             environment.

* Requirements [0/12]

** STARTED Looking up an entry by name

   + [X] Implement
   + [ ] Test
   + [ ] Document

** STARTED Putting a new entry into an environment

   Destructive? Control behavior in case the name is already bound?

   + [X] Implement
   + [ ] Test
   + [ ] Document

** STARTED Ensuring an entry exists in an environment

   Without computing the value eagerly.

   +Updating the existing entry if it is not adequate+ See "Updating
   an entry"

   + [X] Implement
   + [ ] Test
   + [ ] Document

** STARTED Updating an entry in an environment

   As a client, I can update or create an entry in a given
   {{{term(namespace)}}} in an {{{term(environment)}}}. I can provide
   a continuation for updating an existing entry and a second thunk
   for creating a new entry.

   + [X] Implement
   + [ ] Test
   + [ ] Document

** STARTED Map over all entries

   As a client, I can map my function over all entries of an
   {{{term(environment)}}}.

   + Direct entries vs. inherited from parent

   + Effective entries vs. shadowing

   + [ ] Implement
   + [ ] Test
   + [ ] Document

** STARTED Map over namespace entries

   As a client, I can map my function over all entries within a given
   namespace of an {{{term(environment)}}}.

   + Direct entries vs. inherited from parent

   + Effective entries vs. shadowing

   + [X] Implement
   + [ ] Test
   + [ ] Document

** STARTED Arbitrary namespaces

   As a client, I can register arbitrary {{{term(namespace,s)}}} for a
   given {{{term(environment)}}} and perform all operations (put,
   lookup, map, …)  on them. I expect the sets of entries for two
   distinct namespaces to be independent of each other.

** STARTED Arbitrary namespace keys

   As a client, I can use arbitrary keys for a namespace and specify
   how lookups for this kind of key should work.

** STARTED Hierarchical environments

   As a client, I can make a kind of environment that has an
   associated parent environment such that a kind of lookup that
   traverses ancestors until an entry is found or the root is reached
   can be performed.

   + [X] Implement
   + [ ] Test
   + [ ] Document

** TODO Unbound entries and shadowing (See [[*Removing Entries]])

   As a client, I can make a key appear unbound in a given environment
   even if there is a binding for the in an ancestor of the
   environment.

** TODO Efficiency

   Important operations that should be efficient (in order of
   anticipated  importance):

   1. Looking up an entry for a given key

   2. Adding an entry to an environment

   3. Making a child environment

   4. Removing an entry from an environment

** TODO Atomic/transactional updates?

* Design Considerations [1/3]

** TODO Value constraints

   Most namespaces will have constraints on valid values. For example
   ~nil~ is not a valid function. How to described these constraints?
   Can maybe be exploited for [[*Removing Entries]].

** STARTED Removing Entries

   1. What should the interface be?

      A partial solution could be an ~nil-invalid-value-mixin~ which
      makes ~(setf (lookup NAME NAMESPACE ENVIRONMENT) nil)~ act as
      ~remove-binding~ or whatever the operation will be called.

   2. For hierarchical environments, children should be able
      "suppress" entries that exist in parents

      That already works by storing an unbound marker in the child

** DONE How to represent {{{term(scope)}}} in protocols?

   *Resolution: Basically decided to go with the second design.*

   The first alternative would be a-priori determining all possible
   scopes and defining families of generic functions:

   #+BEGIN_SRC lisp
     ;;; direct scope

     (defgeneric map-direct-entries (function namespace environment))

     (defgeneric direct-lookup (key namespace environment))

     ;;; effective scope

     (defgeneric map-effective-entries (function namespace environment))

     (defgeneric effective-lookup (key namespace environment))
   #+END_SRC

   The second alternative would be making the scope a parameter of the
   each operation in the protocol:

   #+BEGIN_SRC lisp
     (defgeneric map-entries (function namespace environment scope))

     (defgeneric lookup (key namespace environment scope))
   #+END_SRC

   Or more conveniently:

   #+BEGIN_SRC lisp
     (defgeneric map-entries (function namespace environment &key scope))

     (defgeneric map-entries-using-scope (function namespace environment scope))

     (defgeneric lookup (key namespace environment &key scope))

     (defgeneric lookup-using-scope (key namespace environment scope))
   #+END_SRC

* Data Structures

** Non-hierarchical Case

   #+BEGIN_EXAMPLE
     > (direct-lookup name namespace environment)
       >             (ensure-namespace environment namespace)          ; meta-namespace-lookup-mixin
       < namespace ← (ensure-namespace environment namespace)
       >            (namespace-bindings namespace environment)
       < bindings ← (namespace-bindings namespace environment)
       > (lookup-in-bindings name bindings namespace environment)
       < (lookup-in-bindings name bindings namespace environment)
     < (direct-lookup name namespace environment)
   #+END_EXAMPLE

   #+BEGIN_EXAMPLE
     > (make-or-update name namespace environment make-cont update-cont)
       >                (lookup name namespace environment :if-does-not-exist nil)
       < value value? ← (lookup name namespace environment :if-does-not-exist nil)
       if value?
         >                        (update-cont value)
         < new-value new-value? ← (update-cont value)
       else
         >                        (make-cont)
         < new-value new-value? ← (make-cont value) t
       end
       > (setf (lookup name namespace environment) new-value)
       < (setf (lookup name namespace environment) new-value)
     < (make-or-update name namespace environment make-cont update-cont)
   #+END_EXAMPLE

   #+BEGIN_EXAMPLE
     > (ensure name namespace environment make-cont)
       > (make-or-update name namespace environment make-cont #'identity)
       < (make-or-update name namespace environment make-cont #'identity)
     < (ensure name namespace environment make-cont)
   #+END_EXAMPLE

** Hierarchical Case

* Optimization Ideas

** Vector Storage

   In lexical environment, store binding information in vectors of the
   form

   #+BEGIN_EXAMPLE
     #(FLAGS₁ BINDINGS₁ FLAGS₂ BINDINGS₂ …)
   #+END_EXAMPLE

   where each ~FLAGS BINDINGS~ pair stores information for one
   namespace and ~FLAGS~ indicates whether ~BINDINGS~ is

   + 0 :: empty
   + ~#xff~ :: a hash-table
   + $N$ :: an alist with $N$ cells

   For each tuple of binding states, such as
   ~(hash-table alist hash-table empty)~
   a lookup function of the form

   #+BEGIN_SRC lisp
     (lambda (name namespace)
       (case namespace
         (NAMESPACE₁
           (gethash name (aref bindings 1)))
         (NAMESPACE₂
           (assoc-value name (aref bindings 3)))
         …))
   #+END_SRC

   when bindings for a namespace shrink or grow, the corresponding
   ~FLAGS~ and ~BINDINGS~ values are updated and a new lookup function
   is installed (after potentially creating it).

   It should also be possible to specify the sizes of bindings when
   creating environment to avoid growing storage incrementally and
   changing representations.

** Separate Class for single binding augmentation

   Augmenting an environment with a single binding could be done using
   a class

   #+BEGIN_SRC lisp
     (defclass single-binding-environment ()
       ((%parent    :initarg :parent
                    :reader  parent)
        (%namespace :initarg :namespace
                    :reader  namespace)
        (%name      :initarg :name
                    :reader  name)
        (%value     :initarg :value
                    :reader  value)))
   #+END_SRC
